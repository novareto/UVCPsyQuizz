<div id="result">
  <h1> Ergebnisse </h1>
  <div class="panel"
       tal:define="data dict(viewlet.display());">
    
    <tal:quizz repeat="qname data.keys()">
      <a data-toggle="collapse" href="" class="btn btn-primary"
	 tal:content="qname"
	 tal:attributes="href '#' + qname;
	                 aria-expanded repeat['qname'].start and 'true' or 'false';
			 aria-controls qname" />
    </tal:quizz>

    <div tal:repeat="qname data.keys()" 
	 tal:attributes="id qname;
	                 class repeat['qname'].start and 'collapse in' or 'collapse'">

      <dl>
	<tal:criterias repeat="criteria data[qname]['criterias'].items()">
	  <dt tal:content="criteria[1]['title']" />
	  <dd>
	    <ul>
	      <li tal:repeat="answer criteria[1]['answers'].items()">
		<strong tal:content="answer[0]" /> :
		<span tal:content="answer[1]" />
	      </li>
	    </ul>
	  </dd>
	</tal:criterias>
      </dl>

      <tal:users condition="data[qname]['users'] is not None">
        <canvas id="myUsersChart" width="800" height="800"></canvas>
	<div id="legendDiv"></div>
	
        <script language="Javascript">
          // Get the context of the canvas element we want to select

	    var data = {
	      labels: <span tal:replace="[k.encode('iso-8859-1') for k in data[qname]['users'].keys()]" />,
	      datasets: [
	      <tal:datasets repeat="i reversed(range(1, 6))">
              {
              title: "<tal:title content="'Data %i' % repeat['i'].number" />",
              fillColor: "<tal:color content="viewlet.colors[i]" />",
              strokeColor: "rgba(120,120,120,1)",
              pointColor: "rgba(120,120,120,1)",
              pointStrokeColor: "#fff",
              pointHighlightFill: "#fff",
              pointHighlightStroke: "rgba(220,220,220,1)",
              data: <span tal:replace="[v[i] for v in data[qname]['users'].values()]" />
              },
	      </tal:datasets>
	      ]
          };

          var ctx = document.getElementById("myUsersChart").getContext("2d");
	  var opt = {
	    legend : true,
	    scaleOverride : true,
  	    scaleStartValue : 0,
  	    scaleSteps : 5,
  	    scaleStepWidth : 20};

          var myNewChart = new Chart(ctx).HorizontalStackedBar(data, opt);
	  document.getElementById("legendDiv").innerHTML = myNewChart.generateLegend();
        </script>
      </tal:users>

      <tal:chart condition="data[qname]['chart'] is not None">
	<canvas id="myChart" width="800" height="800"></canvas>
	
	<script language="Javascript">
	  // Get the context of the canvas element we want to select

	  var data = {
	  labels: <span tal:replace="[k.encode('iso-8859-1') for k in data[qname]['chart'].keys()]" />,
	  datasets: [
          {
	  scaleShowLine : true,
	  scaleBeginAtZero : true,
	  scaleBeginAtZero: true,
	  graphMin : 0,
	  graphMax : 5,
	  scaleShowGridLines: true,
	  scaleGridLineWidth: 1,
          label: "My First dataset",
          fillColor: "rgba(220,220,220,0.3)",
          strokeColor: "rgba(120,120,120,1)",
          pointColor: "rgba(120,120,120,1)",
          pointStrokeColor: "#fff",
          pointHighlightFill: "#fff",
          pointHighlightStroke: "rgba(220,220,220,1)",
          data: <span tal:replace="[v['avg'] for v in data[qname]['chart'].values()]" />
          },
	  ]
	  };

          function computeGraphBG(area, ctx, data, statData, posi,posj, vars) {
	    alert(area, ctx, data, statData, posi,posj, vars);
	  }

          function assignColorFromValue(area, ctx, data,statData, posi,posj,othervars){
	    switch(parseInt(data[posi].value)) {
                  case 0 : rtcolor="blue"; break;
                  case 1 : rtcolor="red"; break;
                  case 2 : rtcolor="yellow"; break;
                  case 3 : rtcolor="pink"; break;
                  case 4 : rtcolor="rgba(255,255,0,0.5)"; break;
                  default : rtcolor="rgba(255,0,255,0.5)"; break;
            }
            return rtcolor;
          }

          var opt = {
            legend : true,
	    scaleShowLabelBackdrop: true,
	    scaleShowLabels: true,
	    scaleShowLine: true,
	    scaleBeginAtZero: true,
	    graphMin: 0,
	    graphMax: 5,
	    defaultFillColor : assignColorFromValue,
	  }

      function assignColorFromValue(area, ctx, data,statData, posi,posj,othervars){
        switch(parseInt(data[posi].value)) {
            case 0 : rtcolor="blue"; break;
            case 1 : rtcolor="red"; break;
            case 2 : rtcolor="yellow"; break;
            case 3 : rtcolor="pink"; break;
            case 4 : rtcolor="rgba(255,255,0,0.5)"; break;
            default : rtcolor="rgba(255,0,255,0.5)"; break;
        }
        return rtcolor;
      }

	  var ctx = document.getElementById("myChart").getContext("2d");
          var myNewChart = new Chart(ctx).Radar(data, opt);
	</script>
      </tal:chart>
      
      <dl tal:repeat="question data[qname]['results']">
	<dt tal:content="question['title']" />
	<dd>
	  <ul>
	    <li tal:repeat="answer question['answers']">
	      <span tal:content="answer['title']" /> :
	      <b tal:content="answer['value']" />
	      <i tal:content="'(%.2f%%)' % answer['percent']" />
	    </li>
	  </ul>
	</dd>
      </dl>
    </div>

  </div>
</div>
